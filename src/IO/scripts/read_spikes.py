import os
import re
from ctypes import *
from os import listdir
from os.path import isfile, join

import npyscreen
import pandas as pd

## Utility to read in binary spikes from various files ##
## Also can stitch together multiple csv files ##

##struct that is the C binary data

workingDir = "."


class neuronSpikeStruct(Structure):
    _fields_ = [('timeStamp', c_double),
                ('sourceCore', c_ushort),
                ('sourceLocal', c_ushort),
                ('destinationGID', c_ulonglong)
                ]


def getBinResults(filename):
    with open(filename, 'rb') as file:
        pass


def getTextResults(filePrefix):
    files = [f for f in listdir(workingDir) if isfile(join(workingDir, f))]
    files = [f for f in files if f.startswith(filePrefix + "_rank")]
    # concat the files together
    outFn = filePrefix + "_full.csv"
    x = open(outFn, 'w')
    x.write("Timestamp,NeuronCore,NeuronLocal,GID\n")
    x.close()

    for file in files:
        os.system("cat " + str(file) + " >> " + str(outFn))


# with open(outFn, 'w') as fout, fileinput.input(files) as fin:
# 	for line in fin:
# 		fout.write(line)
#
# return outFn


def generateCSVData(outFN):
    df = pd.read_csv(outFN, sep=',', header=None, names=["TimeStamp", "Neuron Core", "Neuron Local", "Dest GID"],
                     engine='python')

    return df


directory = ""
firstFile = ""
isBinary = False


class MainForm(npyscreen.Form):
    def afterEditing(self):

        # if self.binMode.value == 1:
        #	self.parentApp.setNextForm('CSVLOAD')
        assert (isinstance(self.selectedFile, str))
        pt = re.compile('([\/].*\/)')
        self.directory = re.search(pt, self.selectedFile).group()

        self.parentApp.setNextForm(None)

    def getDirFNMode(self):
        if self.binMode.value == 0:
            mode = "b"
        else:
            mode = "c"
        return (self.directory, self.selectedFile, mode)

    def create(self):

        self.add(npyscreen.TitleFixedText, name="NeMo Neuron Spike Cleaner")
        self.binMode = self.add(npyscreen.TitleSelectOne, max_height=3,
                                name='Select Data Mode',
                                values=["Binary", "CSV"],
                                scroll_exit=True)
        key_of_choice = 'p'
        self.add_handlers({key_of_choice: self.spawn_file_dialog})
        self.spawn_notify_popup('a')
        self.spawn_file_dialog('a')

        self.add(npyscreen.TitleText, name="Selected starting file", value=self.selectedFile)
        self.resultName = self.add(npyscreen.TitleText, name="Save combined file as: (will add .csv to end of file) ",
                                   value="spike_log")

    # path = self.selectedFile.remove the file from the element so that you get a path.
    # Then show all of the CSV files you are going to merge in a box.
    # then save the selected file, minus the .csv, as the prefix for parsing the rest of the CSV files.

    def spawn_file_dialog(self, code_of_key_pressed):
        the_selected_file = npyscreen.selectFile(confirm_if_exists=False)
        # npyscreen.notify_wait('That returned: {}'.format(the_selected_file), title='results')
        self.selectedFile = the_selected_file

    def spawn_notify_popup(self, key):
        message = "Please select a data (CSV or Binary) file generated by NeMo's Neuron Spike Output"
        npyscreen.notify_confirm(message, title="Msg")


class NeuronSpikeLoader(npyscreen.NPSAppManaged):
    def onStart(self):
        self.addForm("MAIN", MainForm, name="NeMo Spike Output Parser Main Menu")
        self.STARTING_FORM = "MAIN"

    def onCleanExit(self):
        // print("EXIT CLEAN")
        self.done = "DONE!"
        self.data = self.getForm("MAIN").getDirFNMode()


if __name__ == '__main__':

    result = getTextResults("fire_record")
    exit()

    TA = NeuronSpikeLoader()
    TA.run()
    // print(TA.done)
    // print(TA.data)

    workingDir = TA.data[0]
    fileName = TA.data[1]
    if TA.data[2] == 'b':
        binMode = True
    else:
        binMode = False
    resultName = TA.getForm("MAIN").resultName.value
    if binMode:
        pass
    else:
        r1 = getTextResults(resultName)

# load the files and save them into one larger file
